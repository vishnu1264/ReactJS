{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD8DHr6qlgz2y1ZwPD42YWymeKfZegQ9IY\",\n  authDomain: \"crwn-clothing-db-1ffce.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-1ffce\",\n  storageBucket: \"crwn-clothing-db-1ffce.appspot.com\",\n  messagingSenderId: \"194341660623\",\n  appId: \"1:194341660623:web:17f3e1993246fea33854ba\"\n}; // Initialize Firebase\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider(); //everytime somebody interacts with our provider, we always force them to select an account\n\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore(); //points to firestore database\n\nexport const createUserDocumentFromAuth = async userAuth => {\n  //taking doc reference inside db under users collection with this userAuth's uid (unique)\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef); // const userSnapshot = await getDoc(userDocRef);\n  // // console.log(userSnapshot);\n  // // console.log(userSnapshot.exists());\n  // if(!userSnapshot.exists()){\n  //     const {displayName, email} = userAuth;\n  //     const createdAt = new Date();\n  //     try{\n  //         await setDoc(userDocRef, {\n  //             displayName,\n  //             email,\n  //             createdAt\n  //         })\n  //     }\n  //     catch(error){\n  //         console.log('error creating the user', error.message);\n  //     }\n  // }\n  // return userDocRef;\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","console","log"],"sources":["/home/pavan/VISHNU/GIT/ReactJS/Crwn-Clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["    // Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from 'firebase/auth'\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD8DHr6qlgz2y1ZwPD42YWymeKfZegQ9IY\",\n  authDomain: \"crwn-clothing-db-1ffce.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-1ffce\",\n  storageBucket: \"crwn-clothing-db-1ffce.appspot.com\",\n  messagingSenderId: \"194341660623\",\n  appId: \"1:194341660623:web:17f3e1993246fea33854ba\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\n\n//everytime somebody interacts with our provider, we always force them to select an account\nprovider.setCustomParameters({\n    prompt: \"select_account\"\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\nexport const db = getFirestore(); //points to firestore database\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n\n    //taking doc reference inside db under users collection with this userAuth's uid (unique)\n    const userDocRef = doc(db, 'users', userAuth.uid);\n\n    console.log(userDocRef);\n    // const userSnapshot = await getDoc(userDocRef);\n    // // console.log(userSnapshot);\n    // // console.log(userSnapshot.exists());\n\n    // if(!userSnapshot.exists()){\n    //     const {displayName, email} = userAuth;\n    //     const createdAt = new Date();\n\n    //     try{\n    //         await setDoc(userDocRef, {\n    //             displayName,\n    //             email,\n    //             createdAt\n    //         })\n    //     }\n    //     catch(error){\n    //         console.log('error creating the user', error.message);\n    //     }\n    // }\n    // return userDocRef;\n}"],"mappings":"AAAI;AACJ,SAASA,aAAT,QAA8B,cAA9B,C,CACA;AACA;;AACA,SAASC,OAAT,EAAkBC,kBAAlB,EAAsCC,eAAtC,EAAuDC,kBAAvD,QAAiF,eAAjF;AACA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,oBAAlD,C,CAEA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,wCAFS;EAGrBC,SAAS,EAAE,wBAHU;EAIrBC,aAAa,EAAE,oCAJM;EAKrBC,iBAAiB,EAAE,cALE;EAMrBC,KAAK,EAAE;AANc,CAAvB,C,CASA;;AACA,MAAMC,WAAW,GAAGhB,aAAa,CAACS,cAAD,CAAjC;AAEA,MAAMQ,QAAQ,GAAG,IAAIb,kBAAJ,EAAjB,C,CAEA;;AACAa,QAAQ,CAACC,mBAAT,CAA6B;EACzBC,MAAM,EAAE;AADiB,CAA7B;AAIA,OAAO,MAAMC,IAAI,GAAGnB,OAAO,EAApB;AACP,OAAO,MAAMoB,qBAAqB,GAAG,MAAMlB,eAAe,CAACiB,IAAD,EAAOH,QAAP,CAAnD;AAEP,OAAO,MAAMK,EAAE,GAAGjB,YAAY,EAAvB,C,CAA2B;;AAElC,OAAO,MAAMkB,0BAA0B,GAAG,MAAOC,QAAP,IAAoB;EAE1D;EACA,MAAMC,UAAU,GAAGnB,GAAG,CAACgB,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACE,GAAvB,CAAtB;EAEAC,OAAO,CAACC,GAAR,CAAYH,UAAZ,EAL0D,CAM1D;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACH,CA1BM"},"metadata":{},"sourceType":"module"}