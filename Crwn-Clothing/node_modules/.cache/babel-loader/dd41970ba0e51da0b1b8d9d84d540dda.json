{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nimport { getAuth, signInWithRedirect, signInWithPopup, signInWithEmailAndPassword, GoogleAuthProvider, createUserWithEmailAndPassword, onAuthStateChanged, signOut } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query, getDocs } from 'firebase/firestore'; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD8DHr6qlgz2y1ZwPD42YWymeKfZegQ9IY\",\n  authDomain: \"crwn-clothing-db-1ffce.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-1ffce\",\n  storageBucket: \"crwn-clothing-db-1ffce.appspot.com\",\n  messagingSenderId: \"194341660623\",\n  appId: \"1:194341660623:web:17f3e1993246fea33854ba\"\n}; // Initialize Firebase\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider(); //everytime somebody interacts with our provider, we always force them to select an account\n\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n}); //auth keeps track of authentications that are happening\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider); // export const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\n\nexport const db = getFirestore(); //points to firestore database\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  //add objects to collectionref\n  //create collectionref\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db); //batch allows to attach a bunch of different writes, deletes, sets. only \n  //when we're ready to fire the batch, it does the actual transaction.\n\n  objectsToAdd.forEach(object => {\n    //get docref \n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n  await batch.commit(); //fires off the batch\n\n  console.log('done');\n};\nexport const getCategoriesAndDocuments = async () => {\n  const collectionRef = collection(db, 'categories'); //generate query off of this collectionref\n\n  const q = query(collectionRef); //gives on object\n  //fetch doc snapshots we want\n\n  const querySnapshot = await getDocs(q); //querySnapshot.docs() //access different document snapshots \n  //(gives array of all those individual docs inside)\n\n  const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot) => {\n    const {\n      title,\n      items\n    } = docSnapshot.data();\n    acc[title.toLowerCase()] = items;\n    return acc;\n  }, {});\n};\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    displayName: 'vishnu'\n  };\n  if (!userAuth) return; // doc reference inside db under users collection with this userAuth's uid (unique)\n\n  const userDocRef = doc(db, 'users', userAuth.uid); // returns an object that represents some doc reference in the db\n  // console.log(userDocRef);\n  // points to doc, allows to check if instance of that exists in db, allows to access the data.\n\n  const userSnapshot = await getDoc(userDocRef); // console.log(userSnapshot);\n  // tells if inside db, does the data related to reference exists\n  // console.log(userSnapshot.exists());\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","signInWithEmailAndPassword","GoogleAuthProvider","createUserWithEmailAndPassword","onAuthStateChanged","signOut","getFirestore","doc","getDoc","setDoc","collection","writeBatch","query","getDocs","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","object","docRef","title","toLowerCase","set","commit","console","log","getCategoriesAndDocuments","q","querySnapshot","categoryMap","docs","reduce","acc","docSnapshot","items","data","createUserDocumentFromAuth","userAuth","additionalInformation","displayName","userDocRef","uid","userSnapshot","exists","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback"],"sources":["/home/pavan/VISHNU/GIT/ReactJS/Crwn-Clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["    // Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\nimport { getAuth, signInWithRedirect, signInWithPopup, \n    signInWithEmailAndPassword, GoogleAuthProvider, createUserWithEmailAndPassword, \n    onAuthStateChanged, signOut } from 'firebase/auth'\nimport { getFirestore, doc, getDoc, setDoc,\n    collection, writeBatch, query, getDocs } from 'firebase/firestore'\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD8DHr6qlgz2y1ZwPD42YWymeKfZegQ9IY\",\n  authDomain: \"crwn-clothing-db-1ffce.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-1ffce\",\n  storageBucket: \"crwn-clothing-db-1ffce.appspot.com\",\n  messagingSenderId: \"194341660623\",\n  appId: \"1:194341660623:web:17f3e1993246fea33854ba\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst googleProvider = new GoogleAuthProvider();\n\n//everytime somebody interacts with our provider, we always force them to select an account\ngoogleProvider.setCustomParameters({\n    prompt: \"select_account\"\n});\n\n//auth keeps track of authentications that are happening\nexport const auth = getAuth();\n\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\n\n// export const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\n\nexport const db = getFirestore(); //points to firestore database\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    //add objects to collectionref\n    //create collectionref\n    const collectionRef = collection(db, collectionKey);\n    const batch = writeBatch(db);\n    //batch allows to attach a bunch of different writes, deletes, sets. only \n    //when we're ready to fire the batch, it does the actual transaction.\n    objectsToAdd.forEach((object) => {\n        //get docref \n        const docRef = doc(collectionRef, object.title.toLowerCase());\n        batch.set(docRef, object);\n    });\n    await batch.commit(); //fires off the batch\n    console.log('done');\n}\n\nexport const getCategoriesAndDocuments = async () => {\n    const collectionRef = collection(db, 'categories');\n    //generate query off of this collectionref\n    const q = query(collectionRef); //gives on object\n\n    //fetch doc snapshots we want\n    const querySnapshot = await getDocs(q);\n    //querySnapshot.docs() //access different document snapshots \n        //(gives array of all those individual docs inside)\n    const categoryMap = querySnapshot.docs.reduce((acc,docSnapshot) => {\n        const {title, items} = docSnapshot.data();\n        acc[title.toLowerCase()] = items;\n        return acc;\n    },{})\n\n}\n\nexport const createUserDocumentFromAuth = \n    async (userAuth, additionalInformation = {displayName:'vishnu'}) => {\n    if(!userAuth) return;\n\n    // doc reference inside db under users collection with this userAuth's uid (unique)\n    const userDocRef = doc(db, 'users', userAuth.uid);\n\n    // returns an object that represents some doc reference in the db\n    // console.log(userDocRef);\n\n    // points to doc, allows to check if instance of that exists in db, allows to access the data.\n    const userSnapshot = await getDoc(userDocRef);\n    // console.log(userSnapshot);\n\n    // tells if inside db, does the data related to reference exists\n    // console.log(userSnapshot.exists());\n\n    if(!userSnapshot.exists()){\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n\n        try{\n            await setDoc(userDocRef, {\n                displayName,\n                email,\n                createdAt,\n                ...additionalInformation\n            })\n        }\n        catch(error){\n            console.log('error creating the user', error.message);\n        }\n    }\n    return userDocRef;\n}\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n    if(!email || !password)\n        return;\n    return await createUserWithEmailAndPassword(auth, email, password);\n}\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n    if(!email || !password)\n        return;\n    return await signInWithEmailAndPassword(auth, email, password);\n}\n\nexport const signOutUser = async() => await signOut(auth);\n\nexport const onAuthStateChangedListener = (callback) => \n    onAuthStateChanged(auth, callback);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}